# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from RM_msgs/RM.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RM(genpy.Message):
  _md5sum = "97b056c437e37e3ccc8f73221431cb76"
  _type = "RM_msgs/RM"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# 电机的线速度
int16 Motor_M3508_ID01_W
int16 Motor_M3508_ID02_W
int16 Motor_M3508_ID03_W
int16 Motor_M3508_ID04_W

# JY901S角加速度
float32 JY901S_Acc_X
float32 JY901S_Acc_Y
float32 JY901S_Acc_Z
# JY901S角速度
float32 JY901S_Ang_Vel_X
float32 JY901S_Ang_Vel_Y
float32 JY901S_Ang_Vel_Z
# JY901S角度
float32 JY901S_Ang_X
float32 JY901S_Ang_Y
float32 JY901S_Ang_Z

# UWB
float32 UWB_X
float32 UWB_Y"""
  __slots__ = ['Motor_M3508_ID01_W','Motor_M3508_ID02_W','Motor_M3508_ID03_W','Motor_M3508_ID04_W','JY901S_Acc_X','JY901S_Acc_Y','JY901S_Acc_Z','JY901S_Ang_Vel_X','JY901S_Ang_Vel_Y','JY901S_Ang_Vel_Z','JY901S_Ang_X','JY901S_Ang_Y','JY901S_Ang_Z','UWB_X','UWB_Y']
  _slot_types = ['int16','int16','int16','int16','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Motor_M3508_ID01_W,Motor_M3508_ID02_W,Motor_M3508_ID03_W,Motor_M3508_ID04_W,JY901S_Acc_X,JY901S_Acc_Y,JY901S_Acc_Z,JY901S_Ang_Vel_X,JY901S_Ang_Vel_Y,JY901S_Ang_Vel_Z,JY901S_Ang_X,JY901S_Ang_Y,JY901S_Ang_Z,UWB_X,UWB_Y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RM, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Motor_M3508_ID01_W is None:
        self.Motor_M3508_ID01_W = 0
      if self.Motor_M3508_ID02_W is None:
        self.Motor_M3508_ID02_W = 0
      if self.Motor_M3508_ID03_W is None:
        self.Motor_M3508_ID03_W = 0
      if self.Motor_M3508_ID04_W is None:
        self.Motor_M3508_ID04_W = 0
      if self.JY901S_Acc_X is None:
        self.JY901S_Acc_X = 0.
      if self.JY901S_Acc_Y is None:
        self.JY901S_Acc_Y = 0.
      if self.JY901S_Acc_Z is None:
        self.JY901S_Acc_Z = 0.
      if self.JY901S_Ang_Vel_X is None:
        self.JY901S_Ang_Vel_X = 0.
      if self.JY901S_Ang_Vel_Y is None:
        self.JY901S_Ang_Vel_Y = 0.
      if self.JY901S_Ang_Vel_Z is None:
        self.JY901S_Ang_Vel_Z = 0.
      if self.JY901S_Ang_X is None:
        self.JY901S_Ang_X = 0.
      if self.JY901S_Ang_Y is None:
        self.JY901S_Ang_Y = 0.
      if self.JY901S_Ang_Z is None:
        self.JY901S_Ang_Z = 0.
      if self.UWB_X is None:
        self.UWB_X = 0.
      if self.UWB_Y is None:
        self.UWB_Y = 0.
    else:
      self.Motor_M3508_ID01_W = 0
      self.Motor_M3508_ID02_W = 0
      self.Motor_M3508_ID03_W = 0
      self.Motor_M3508_ID04_W = 0
      self.JY901S_Acc_X = 0.
      self.JY901S_Acc_Y = 0.
      self.JY901S_Acc_Z = 0.
      self.JY901S_Ang_Vel_X = 0.
      self.JY901S_Ang_Vel_Y = 0.
      self.JY901S_Ang_Vel_Z = 0.
      self.JY901S_Ang_X = 0.
      self.JY901S_Ang_Y = 0.
      self.JY901S_Ang_Z = 0.
      self.UWB_X = 0.
      self.UWB_Y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4h11f().pack(_x.Motor_M3508_ID01_W, _x.Motor_M3508_ID02_W, _x.Motor_M3508_ID03_W, _x.Motor_M3508_ID04_W, _x.JY901S_Acc_X, _x.JY901S_Acc_Y, _x.JY901S_Acc_Z, _x.JY901S_Ang_Vel_X, _x.JY901S_Ang_Vel_Y, _x.JY901S_Ang_Vel_Z, _x.JY901S_Ang_X, _x.JY901S_Ang_Y, _x.JY901S_Ang_Z, _x.UWB_X, _x.UWB_Y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.Motor_M3508_ID01_W, _x.Motor_M3508_ID02_W, _x.Motor_M3508_ID03_W, _x.Motor_M3508_ID04_W, _x.JY901S_Acc_X, _x.JY901S_Acc_Y, _x.JY901S_Acc_Z, _x.JY901S_Ang_Vel_X, _x.JY901S_Ang_Vel_Y, _x.JY901S_Ang_Vel_Z, _x.JY901S_Ang_X, _x.JY901S_Ang_Y, _x.JY901S_Ang_Z, _x.UWB_X, _x.UWB_Y,) = _get_struct_4h11f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4h11f().pack(_x.Motor_M3508_ID01_W, _x.Motor_M3508_ID02_W, _x.Motor_M3508_ID03_W, _x.Motor_M3508_ID04_W, _x.JY901S_Acc_X, _x.JY901S_Acc_Y, _x.JY901S_Acc_Z, _x.JY901S_Ang_Vel_X, _x.JY901S_Ang_Vel_Y, _x.JY901S_Ang_Vel_Z, _x.JY901S_Ang_X, _x.JY901S_Ang_Y, _x.JY901S_Ang_Z, _x.UWB_X, _x.UWB_Y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.Motor_M3508_ID01_W, _x.Motor_M3508_ID02_W, _x.Motor_M3508_ID03_W, _x.Motor_M3508_ID04_W, _x.JY901S_Acc_X, _x.JY901S_Acc_Y, _x.JY901S_Acc_Z, _x.JY901S_Ang_Vel_X, _x.JY901S_Ang_Vel_Y, _x.JY901S_Ang_Vel_Z, _x.JY901S_Ang_X, _x.JY901S_Ang_Y, _x.JY901S_Ang_Z, _x.UWB_X, _x.UWB_Y,) = _get_struct_4h11f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4h11f = None
def _get_struct_4h11f():
    global _struct_4h11f
    if _struct_4h11f is None:
        _struct_4h11f = struct.Struct("<4h11f")
    return _struct_4h11f
