// Generated by gencpp from file robomaster_msgs/robomaster.msg
// DO NOT EDIT!


#ifndef ROBOMASTER_MSGS_MESSAGE_ROBOMASTER_H
#define ROBOMASTER_MSGS_MESSAGE_ROBOMASTER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robomaster_msgs
{
template <class ContainerAllocator>
struct robomaster_
{
  typedef robomaster_<ContainerAllocator> Type;

  robomaster_()
    : Motor_M3508_ID01_W(0.0)
    , Motor_M3508_ID02_W(0.0)
    , Motor_M3508_ID03_W(0.0)
    , Motor_M3508_ID04_W(0.0)
    , JY901S_Acc_X(0.0)
    , JY901S_Acc_Y(0.0)
    , JY901S_Acc_Z(0.0)
    , JY901S_Ang_Vel_X(0.0)
    , JY901S_Ang_Vel_Y(0.0)
    , JY901S_Ang_Vel_Z(0.0)
    , JY901S_Ang_X(0.0)
    , JY901S_Ang_Y(0.0)
    , JY901S_Ang_Z(0.0)
    , UWB_X(0.0)
    , UWB_Y(0.0)  {
    }
  robomaster_(const ContainerAllocator& _alloc)
    : Motor_M3508_ID01_W(0.0)
    , Motor_M3508_ID02_W(0.0)
    , Motor_M3508_ID03_W(0.0)
    , Motor_M3508_ID04_W(0.0)
    , JY901S_Acc_X(0.0)
    , JY901S_Acc_Y(0.0)
    , JY901S_Acc_Z(0.0)
    , JY901S_Ang_Vel_X(0.0)
    , JY901S_Ang_Vel_Y(0.0)
    , JY901S_Ang_Vel_Z(0.0)
    , JY901S_Ang_X(0.0)
    , JY901S_Ang_Y(0.0)
    , JY901S_Ang_Z(0.0)
    , UWB_X(0.0)
    , UWB_Y(0.0)  {
  (void)_alloc;
    }



   typedef float _Motor_M3508_ID01_W_type;
  _Motor_M3508_ID01_W_type Motor_M3508_ID01_W;

   typedef float _Motor_M3508_ID02_W_type;
  _Motor_M3508_ID02_W_type Motor_M3508_ID02_W;

   typedef float _Motor_M3508_ID03_W_type;
  _Motor_M3508_ID03_W_type Motor_M3508_ID03_W;

   typedef float _Motor_M3508_ID04_W_type;
  _Motor_M3508_ID04_W_type Motor_M3508_ID04_W;

   typedef float _JY901S_Acc_X_type;
  _JY901S_Acc_X_type JY901S_Acc_X;

   typedef float _JY901S_Acc_Y_type;
  _JY901S_Acc_Y_type JY901S_Acc_Y;

   typedef float _JY901S_Acc_Z_type;
  _JY901S_Acc_Z_type JY901S_Acc_Z;

   typedef float _JY901S_Ang_Vel_X_type;
  _JY901S_Ang_Vel_X_type JY901S_Ang_Vel_X;

   typedef float _JY901S_Ang_Vel_Y_type;
  _JY901S_Ang_Vel_Y_type JY901S_Ang_Vel_Y;

   typedef float _JY901S_Ang_Vel_Z_type;
  _JY901S_Ang_Vel_Z_type JY901S_Ang_Vel_Z;

   typedef float _JY901S_Ang_X_type;
  _JY901S_Ang_X_type JY901S_Ang_X;

   typedef float _JY901S_Ang_Y_type;
  _JY901S_Ang_Y_type JY901S_Ang_Y;

   typedef float _JY901S_Ang_Z_type;
  _JY901S_Ang_Z_type JY901S_Ang_Z;

   typedef float _UWB_X_type;
  _UWB_X_type UWB_X;

   typedef float _UWB_Y_type;
  _UWB_Y_type UWB_Y;





  typedef boost::shared_ptr< ::robomaster_msgs::robomaster_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robomaster_msgs::robomaster_<ContainerAllocator> const> ConstPtr;

}; // struct robomaster_

typedef ::robomaster_msgs::robomaster_<std::allocator<void> > robomaster;

typedef boost::shared_ptr< ::robomaster_msgs::robomaster > robomasterPtr;
typedef boost::shared_ptr< ::robomaster_msgs::robomaster const> robomasterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robomaster_msgs::robomaster_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robomaster_msgs::robomaster_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robomaster_msgs::robomaster_<ContainerAllocator1> & lhs, const ::robomaster_msgs::robomaster_<ContainerAllocator2> & rhs)
{
  return lhs.Motor_M3508_ID01_W == rhs.Motor_M3508_ID01_W &&
    lhs.Motor_M3508_ID02_W == rhs.Motor_M3508_ID02_W &&
    lhs.Motor_M3508_ID03_W == rhs.Motor_M3508_ID03_W &&
    lhs.Motor_M3508_ID04_W == rhs.Motor_M3508_ID04_W &&
    lhs.JY901S_Acc_X == rhs.JY901S_Acc_X &&
    lhs.JY901S_Acc_Y == rhs.JY901S_Acc_Y &&
    lhs.JY901S_Acc_Z == rhs.JY901S_Acc_Z &&
    lhs.JY901S_Ang_Vel_X == rhs.JY901S_Ang_Vel_X &&
    lhs.JY901S_Ang_Vel_Y == rhs.JY901S_Ang_Vel_Y &&
    lhs.JY901S_Ang_Vel_Z == rhs.JY901S_Ang_Vel_Z &&
    lhs.JY901S_Ang_X == rhs.JY901S_Ang_X &&
    lhs.JY901S_Ang_Y == rhs.JY901S_Ang_Y &&
    lhs.JY901S_Ang_Z == rhs.JY901S_Ang_Z &&
    lhs.UWB_X == rhs.UWB_X &&
    lhs.UWB_Y == rhs.UWB_Y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robomaster_msgs::robomaster_<ContainerAllocator1> & lhs, const ::robomaster_msgs::robomaster_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robomaster_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robomaster_msgs::robomaster_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robomaster_msgs::robomaster_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robomaster_msgs::robomaster_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robomaster_msgs::robomaster_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robomaster_msgs::robomaster_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robomaster_msgs::robomaster_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robomaster_msgs::robomaster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f486166047ceb697ecb8097101edead7";
  }

  static const char* value(const ::robomaster_msgs::robomaster_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf486166047ceb697ULL;
  static const uint64_t static_value2 = 0xecb8097101edead7ULL;
};

template<class ContainerAllocator>
struct DataType< ::robomaster_msgs::robomaster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robomaster_msgs/robomaster";
  }

  static const char* value(const ::robomaster_msgs::robomaster_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robomaster_msgs::robomaster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 电机的线速度\n"
"float32 Motor_M3508_ID01_W\n"
"float32 Motor_M3508_ID02_W\n"
"float32 Motor_M3508_ID03_W\n"
"float32 Motor_M3508_ID04_W\n"
"\n"
"# JY901S角加速度\n"
"float32 JY901S_Acc_X\n"
"float32 JY901S_Acc_Y\n"
"float32 JY901S_Acc_Z\n"
"# JY901S角速度\n"
"float32 JY901S_Ang_Vel_X\n"
"float32 JY901S_Ang_Vel_Y\n"
"float32 JY901S_Ang_Vel_Z\n"
"# JY901S角度\n"
"float32 JY901S_Ang_X\n"
"float32 JY901S_Ang_Y\n"
"float32 JY901S_Ang_Z\n"
"\n"
"# UWB\n"
"float32 UWB_X\n"
"float32 UWB_Y\n"
;
  }

  static const char* value(const ::robomaster_msgs::robomaster_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robomaster_msgs::robomaster_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Motor_M3508_ID01_W);
      stream.next(m.Motor_M3508_ID02_W);
      stream.next(m.Motor_M3508_ID03_W);
      stream.next(m.Motor_M3508_ID04_W);
      stream.next(m.JY901S_Acc_X);
      stream.next(m.JY901S_Acc_Y);
      stream.next(m.JY901S_Acc_Z);
      stream.next(m.JY901S_Ang_Vel_X);
      stream.next(m.JY901S_Ang_Vel_Y);
      stream.next(m.JY901S_Ang_Vel_Z);
      stream.next(m.JY901S_Ang_X);
      stream.next(m.JY901S_Ang_Y);
      stream.next(m.JY901S_Ang_Z);
      stream.next(m.UWB_X);
      stream.next(m.UWB_Y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robomaster_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robomaster_msgs::robomaster_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robomaster_msgs::robomaster_<ContainerAllocator>& v)
  {
    s << indent << "Motor_M3508_ID01_W: ";
    Printer<float>::stream(s, indent + "  ", v.Motor_M3508_ID01_W);
    s << indent << "Motor_M3508_ID02_W: ";
    Printer<float>::stream(s, indent + "  ", v.Motor_M3508_ID02_W);
    s << indent << "Motor_M3508_ID03_W: ";
    Printer<float>::stream(s, indent + "  ", v.Motor_M3508_ID03_W);
    s << indent << "Motor_M3508_ID04_W: ";
    Printer<float>::stream(s, indent + "  ", v.Motor_M3508_ID04_W);
    s << indent << "JY901S_Acc_X: ";
    Printer<float>::stream(s, indent + "  ", v.JY901S_Acc_X);
    s << indent << "JY901S_Acc_Y: ";
    Printer<float>::stream(s, indent + "  ", v.JY901S_Acc_Y);
    s << indent << "JY901S_Acc_Z: ";
    Printer<float>::stream(s, indent + "  ", v.JY901S_Acc_Z);
    s << indent << "JY901S_Ang_Vel_X: ";
    Printer<float>::stream(s, indent + "  ", v.JY901S_Ang_Vel_X);
    s << indent << "JY901S_Ang_Vel_Y: ";
    Printer<float>::stream(s, indent + "  ", v.JY901S_Ang_Vel_Y);
    s << indent << "JY901S_Ang_Vel_Z: ";
    Printer<float>::stream(s, indent + "  ", v.JY901S_Ang_Vel_Z);
    s << indent << "JY901S_Ang_X: ";
    Printer<float>::stream(s, indent + "  ", v.JY901S_Ang_X);
    s << indent << "JY901S_Ang_Y: ";
    Printer<float>::stream(s, indent + "  ", v.JY901S_Ang_Y);
    s << indent << "JY901S_Ang_Z: ";
    Printer<float>::stream(s, indent + "  ", v.JY901S_Ang_Z);
    s << indent << "UWB_X: ";
    Printer<float>::stream(s, indent + "  ", v.UWB_X);
    s << indent << "UWB_Y: ";
    Printer<float>::stream(s, indent + "  ", v.UWB_Y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOMASTER_MSGS_MESSAGE_ROBOMASTER_H
